{"version":3,"sources":["components/Table/table.module.css","components/Table/index.js","query/table.js","components/App.js","serviceWorker.js","apollo/index.js","index.js"],"names":["module","exports","table","title","Table","_ref","rates","active","rowOnClick","label","concat","rows","map","_ref2","currency","rate","react_default","a","createElement","key","data-currency","className","css","onClick","App","state","handlerOnClick","event","target","dataset","undefined","_this","setState","renderTable","loading","error","data","components_Table","this","react_apollo_browser_umd","query","gql","_templateObject","fetchRates","Component","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,MAAA,qBAAAC,MAAA,wMC4BHC,EAzBD,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,OAAQC,EAAiBH,EAAjBG,WACxBC,EAAK,kBAAAC,OAAqBH,EAArB,KAELI,EAAOL,EAAMM,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,KAAb,OACrBC,EAAAC,EAAAC,cAAA,MAAIC,IAAKL,GACPE,EAAAC,EAAAC,cAAA,MAAIE,gBAAeN,GAChBA,GAEHE,EAAAC,EAAAC,cAAA,UAAKH,MAIT,OACEC,EAAAC,EAAAC,cAAA,SAAOG,UAAWC,IAAIpB,OACpBc,EAAAC,EAAAC,cAAA,WAASG,UAAWC,IAAInB,OACrBM,GAEHO,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAAA,SAAOK,QAASf,GACbG,kKCrBF,ICgDQa,6MA3CbC,MAAQ,CACNX,SAAU,SAGZY,eAAiB,SAAAC,GAAS,IAChBb,EAAaa,EAAMC,OAAOC,QAA1Bf,cAESgB,IAAbhB,GACFiB,EAAKC,SAAS,CAAElB,gBAIpBmB,YAAc,SAAA5B,GAA8B,IAA3B6B,EAA2B7B,EAA3B6B,QAASC,EAAkB9B,EAAlB8B,MAAOC,EAAW/B,EAAX+B,KACvBtB,EAAaiB,EAAKN,MAAlBX,SAER,OAAIoB,EACKlB,EAAAC,EAAAC,cAAA,uBAGLiB,EACKnB,EAAAC,EAAAC,cAAA,qBAIPF,EAAAC,EAAAC,cAACmB,EAAD,CACE/B,MAAO8B,EAAK9B,MACZC,OAAQO,EACRN,WAAYuB,EAAKL,0FAKd,IACCZ,EAAawB,KAAKb,MAAlBX,SAER,OACEE,EAAAC,EAAAC,cAACqB,EAAA,MAAD,CAAOC,MDzCa,SAAA1B,GAAQ,OAAI2B,IAAJC,IAEb5B,GCuCD6B,CAAW7B,IACtBwB,KAAKL,oBAtCIW,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCXSC,EALA,UAAIC,GAAa,CAE9BC,IAAK,2CCIPC,IAASC,OACPtC,EAAAC,EAAAC,cAACqB,EAAA,eAAD,CAAgBW,OAAQA,GACtBlC,EAAAC,EAAAC,cAACqC,EAAD,OAEFC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.19cc2f43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"table_table__2rI6A\",\"title\":\"table_title__2aI6d\"};","import React from 'react';\n\nimport css from './table.module.css';\n\nconst Table = ({ rates, active, rowOnClick }) => {\n  const label = `Exchange Rate (${active})`;\n\n  const rows = rates.map(({ currency, rate }) => (\n    <tr key={currency}>\n      <td data-currency={currency}>\n        {currency}\n      </td>\n      <td>{rate}</td>\n    </tr>\n  ));\n\n  return (\n    <table className={css.table}>\n      <caption className={css.title}>\n        {label}\n      </caption>\n      <thead></thead>\n      <tbody onClick={rowOnClick}>\n        {rows}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;","import gql from 'graphql-tag';\n\nexport const fetchRates = currency => gql`\n{\n  rates(currency: \"${currency}\") {\n    currency\n    rate\n  }\n}`;\n","import React, { Component } from 'react';\nimport { Query  } from 'react-apollo';\n\nimport Table from './Table';\nimport { fetchRates } from '../query/table';\n\nclass App extends Component {\n  state = {\n    currency: 'UAH',\n  };\n\n  handlerOnClick = event => {\n    const { currency } = event.target.dataset;\n  \n    if (currency !== undefined) {\n      this.setState({ currency });\n    }\n  };\n\n  renderTable = ({ loading, error, data }) => {\n    const { currency } = this.state;\n  \n    if (loading) {\n      return <p>Loading...</p>;\n    }\n  \n    if (error) {\n      return <p>Error :(</p>;\n    }\n  \n    return (\n      <Table\n        rates={data.rates}\n        active={currency}\n        rowOnClick={this.handlerOnClick}\n      />\n    );\n  };\n\n  render() {\n    const { currency } = this.state;\n\n    return (\n      <Query query={fetchRates(currency)}>\n        {this.renderTable}\n      </Query>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  // API: https://launchpad.graphql.com/5qz5mr35n9\n  uri: \"https://5qz5mr35n9.lp.gql.zone/graphql\"\n});\n\nexport default client;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider  } from 'react-apollo';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport client from './apollo';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}