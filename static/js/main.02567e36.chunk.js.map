{"version":3,"sources":["components/Table/table.module.css","components/Table/index.js","query/table.js","components/App.js","serviceWorker.js","apollo/index.js","index.js"],"names":["module","exports","table","title","Table","_ref","rates","active","rowOnClick","rows","map","_ref2","currency","rate","name","react_default","a","createElement","key","data-currency","className","css","onClick","FETCH_RATES","gql","_templateObject","App","state","handlerOnClick","event","target","dataset","undefined","_this","setState","renderTable","loading","error","data","components_Table","variables","this","react_apollo_browser_umd","query","Component","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,MAAA,qBAAAC,MAAA,wMC6BHC,EA1BD,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,OAAQC,EAAiBH,EAAjBG,WACxBC,EAAOH,EAAMI,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,KAAMC,EAAnBH,EAAmBG,KAAnB,OACrBC,EAAAC,EAAAC,cAAA,MAAIC,IAAKN,GACPG,EAAAC,EAAAC,cAAA,MAAIE,gBAAeP,GAAWE,GAC9BC,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,UAAKJ,MAIT,OACEE,EAAAC,EAAAC,cAAA,SAAOG,UAAWC,IAAInB,OACpBa,EAAAC,EAAAC,cAAA,WAASG,UAAWC,IAAIlB,OACrBI,GAEHQ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,oBAGJF,EAAAC,EAAAC,cAAA,SAAOK,QAASd,GAAaC,uNCvB5B,IAAMc,QAAcC,GAAHC,KCiDTC,6MA5CbC,MAAQ,CACNf,SAAU,SAGZgB,eAAiB,SAAAC,GAAS,IAChBjB,EAAaiB,EAAMC,OAAOC,QAA1BnB,cAESoB,IAAbpB,GACFqB,EAAKC,SAAS,CAAEtB,gBAIpBuB,YAAc,SAAA9B,GAA8B,IAA3B+B,EAA2B/B,EAA3B+B,QAASC,EAAkBhC,EAAlBgC,MAAOC,EAAWjC,EAAXiC,KACvB1B,EAAaqB,EAAKN,MAAlBf,SAER,OAAIwB,EACKrB,EAAAC,EAAAC,cAAA,uBAGLoB,EACKtB,EAAAC,EAAAC,cAAA,qBAIPF,EAAAC,EAAAC,cAACsB,EAAD,CACEjC,MAAOgC,EAAKhC,MACZC,OAAQK,EACRJ,WAAYyB,EAAKL,0FAKd,IAEDY,EAAY,CAAE5B,SADC6B,KAAKd,MAAlBf,UAGR,OACEG,EAAAC,EAAAC,cAACyB,EAAA,MAAD,CAAOF,UAAWA,EAAWG,MAAOpB,GACjCkB,KAAKN,oBAvCIS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCXSC,EALA,UAAIC,GAAa,CAE9BC,IAAK,mDCIPC,IAASC,OACPvC,EAAAC,EAAAC,cAACyB,EAAA,eAAD,CAAgBQ,OAAQA,GACtBnC,EAAAC,EAAAC,cAACsC,EAAD,OAEFC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.02567e36.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"table_table__1klYw\",\"title\":\"table_title__2_mt3\"};","import React from 'react';\r\n\r\nimport css from './table.module.css';\r\n\r\nconst Table = ({ rates, active, rowOnClick }) => {\r\n  const rows = rates.map(({ currency, rate, name }) => (\r\n    <tr key={currency}>\r\n      <td data-currency={currency}>{name}</td>\r\n      <td>{currency}</td>\r\n      <td>{rate}</td>\r\n    </tr>\r\n  ));\r\n\r\n  return (\r\n    <table className={css.table}>\r\n      <caption className={css.title}>\r\n        {active}\r\n      </caption>\r\n      <thead>\r\n        <tr>\r\n          <th />\r\n          <th>Currency</th>\r\n          <th>Rate</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody onClick={rowOnClick}>{rows}</tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const FETCH_RATES = gql`\r\n  query rates($currency: String!) {\r\n    rates(currency: $currency) {\r\n      currency\r\n      rate\r\n      name\r\n    }\r\n  }\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { Query } from 'react-apollo';\r\n\r\nimport Table from './Table';\r\nimport { FETCH_RATES } from '../query/table';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currency: 'UAH'\r\n  };\r\n\r\n  handlerOnClick = event => {\r\n    const { currency } = event.target.dataset;\r\n\r\n    if (currency !== undefined) {\r\n      this.setState({ currency });\r\n    }\r\n  };\r\n\r\n  renderTable = ({ loading, error, data }) => {\r\n    const { currency } = this.state;\r\n\r\n    if (loading) {\r\n      return <p>Loading...</p>;\r\n    }\r\n\r\n    if (error) {\r\n      return <p>Error :(</p>;\r\n    }\r\n\r\n    return (\r\n      <Table\r\n        rates={data.rates}\r\n        active={currency}\r\n        rowOnClick={this.handlerOnClick}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { currency } = this.state;\r\n    const variables = { currency };\r\n\r\n    return (\r\n      <Query variables={variables} query={FETCH_RATES}>\r\n        {this.renderTable}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import ApolloClient from 'apollo-boost';\r\n\r\nconst client = new ApolloClient({\r\n  // API: https://repl.it/@_shoonia/graphql-demo?language=express\r\n  uri: 'https://graphql-demo---shoonia.repl.co/graphql'\r\n});\r\n\r\nexport default client;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloProvider } from 'react-apollo';\r\n\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport client from './apollo';\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}